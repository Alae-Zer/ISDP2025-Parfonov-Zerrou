@page "/buy-products"
@using ISDP2025_Parfonov_Zerrou.Models
@using Microsoft.EntityFrameworkCore
@using ISDP_WEB.Pages.Services
@inject BestContext Context
@inject StateContainer StateContainer
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-4 pb-8">
    <MudText Typo="Typo.h4" Class="mb-4">Shop Products</MudText>

    <!-- Store Selection -->
    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-2">Select Store Location</MudText>
        <MudSelect T="Site" @bind-Value="selectedStore" Label="Store" Variant="Variant.Outlined" 
                  AnchorOrigin="Origin.BottomCenter" Class="mb-2" FullWidth="false"
                  AdornmentIcon="@Icons.Material.Filled.Store" AdornmentColor="Color.Primary">
            @if (stores != null)
            {
                @foreach (var store in stores)
                {
                    <MudSelectItem Value="@store">@store.SiteName</MudSelectItem>
                }
            }
        </MudSelect>
        
        @if (selectedStore != null)
        {
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                @selectedStore.Address, @selectedStore.City, @selectedStore.ProvinceId
            </MudText>
        }
    </MudPaper>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="d-flex justify-center my-4">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    <!-- No Store Selected State -->
    else if (selectedStore == null)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">
            Please select a store to view available products.
        </MudAlert>
    }
    else
    {
        <!-- Search and Filters -->
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="searchTerm" Label="Search Products" 
                             Variant="Variant.Outlined" Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             AdornmentColor="Color.Primary" 
                             Immediate="true"
                             OnKeyUp="@SearchProducts" />
            </MudItem>
            <MudItem xs="12" md="3">
            <MudSelect T="string" @bind-Value="selectedCategory" Label="Category" Variant="Variant.Outlined"
                       OnSelectedItemChanged="@((string value) => SearchProducts())">
                    <MudSelectItem Value="@("All")">All Categories</MudSelectItem>
                    @foreach (var category in categories)
                    {
                        <MudSelectItem Value="@category">@category</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="3" Class="d-flex align-center">
                <MudSwitch @bind-value="inStockOnly" CheckedChanged="StockOnlyChanged" Color="Color.Primary" Label="In Stock Only" />
            </MudItem>
        </MudGrid>

        <!-- No Results State -->
        @if (!filteredProducts.Any())
        {
            <MudAlert Severity="Severity.Info" Class="my-4">
                No products match your search criteria. Try adjusting your filters.
            </MudAlert>
        }
        else
        {
            <!-- Products Grid -->
            <MudGrid Class="mt-4">
                @foreach (var product in filteredProducts)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Elevation="2" Class="h-100 d-flex flex-column">
                            <MudCardMedia Image="@GetProductImage(product)" Height="200" />
                            <MudCardContent Class="flex-grow-1">
                                <MudText Typo="Typo.h6" Class="mb-1">@product.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">SKU: @product.Sku</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">@product.Description</MudText>
                                
                                <MudDivider Class="my-2" />
                                
                                <div class="d-flex justify-space-between align-center">
                                    <MudText Typo="Typo.h6" Color="Color.Primary">$@product.RetailPrice.ToString("F2")</MudText>
                                    @if (product.StockQuantity > 0)
                                    {
                                        <MudChip T="String" Color="Color.Success" Size="Size.Small">In Stock: @product.StockQuantity</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip T="String" Color="Color.Error" Size="Size.Small">Out of Stock</MudChip>
                                    }
                                </div>
                            </MudCardContent>
                            <MudCardActions Class="d-flex justify-end">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                          @onclick="() => OpenProductDialog(product)">Details</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                          Disabled="@(product.StockQuantity <= 0)"
                                          @onclick="() => AddToCart(product)">Add to Cart</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    }

    <!-- Cart Button with Counter -->
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ShoppingCart" Label="@($"View Cart ({StateContainer.CartItems.Count})")" 
           Class="mud-width-full mt-4" OnClick="@(() => cartOpen = true)" />

    <!-- Shopping Cart Drawer -->
    <MudDrawer @bind-Open="@cartOpen" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary" Width="350px">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Shopping Cart</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" Edge="Edge.End" OnClick="@(() => cartOpen = false)" />
        </MudDrawerHeader>
        <MudDrawerContainer>
            @if (!StateContainer.CartItems.Any())
            {
                <MudText Typo="Typo.body1" Class="pa-4">Your cart is empty.</MudText>
            }
            else
            {
                <MudList T="String" Clickable="false" Class="pa-0">
                    @foreach (var item in StateContainer.CartItems)
                    {
                        <MudListItem>
                            <div class="d-flex align-center">
                                <MudAvatar Image="@item.ImageUrl" Class="mr-2" />
                                <div class="flex-grow-1">
                                    <MudText Typo="Typo.body1">@item.Name</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        $@item.Price.ToString("F2") x @item.Quantity
                                    </MudText>
                                </div>
                                <div class="d-flex align-center">
                                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Size="Size.Small"
                                                  @onclick="() => UpdateCartItemQuantity(item.ItemId, Math.Max(1, item.Quantity - 1))" />
                                    <MudText Typo="Typo.body1" Class="mx-2">@item.Quantity</MudText>
                                    <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small"
                                                  @onclick="() => UpdateCartItemQuantity(item.ItemId, Math.Min(item.StockQuantity, item.Quantity + 1))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error"
                                                  @onclick="() => RemoveFromCart(item.ItemId)" />
                                </div>
                            </div>
                        </MudListItem>
                        <MudDivider />
                    }
                </MudList>
                
                <div class="pa-4">
                    <MudText Typo="Typo.h6" Class="d-flex justify-space-between mb-4">
                        <span>Total:</span>
                        <span>$@CalculateTotal().ToString("F2")</span>
                    </MudText>
                    
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                              StartIcon="@Icons.Material.Filled.ShoppingCart"
                              Href="/checkout">
                        Checkout
                    </MudButton>
                </div>
            }
        </MudDrawerContainer>
    </MudDrawer>
</MudContainer>

@code {
    private List<Site> stores = new List<Site>();
    private Site selectedStore;
    private string searchTerm = "";
    private string selectedCategory = "All";
    private bool inStockOnly = false;
    private bool isLoading = true;
    private bool cartOpen = false;
    
    // For product display
    private List<ProductViewModel> allProducts = new List<ProductViewModel>();
    private List<ProductViewModel> filteredProducts = new List<ProductViewModel>();
    private List<string> categories = new List<string>();

    private void StockOnlyChanged(bool value)
    {
        inStockOnly = value;
        SearchProducts();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadStores();
        await LoadCategories();
        isLoading = false;
    }

    private async Task LoadStores()
    {
        try
        {
            // Filter to only include active retail stores (not warehouses, etc.)
            int[] notStoreIds = { 1, 2, 3, 9999, 10000 };
            stores = await Context.Sites
                .Where(s => s.Active == 1 && !notStoreIds.Contains(s.SiteId))
                .OrderBy(s => s.SiteName)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading stores: {ex.Message}");
            Snackbar.Add($"Error loading stores: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await Context.Categories
                .Where(c => c.Active == 1)
                .Select(c => c.CategoryName)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            Snackbar.Add($"Error loading categories: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadProducts()
    {
        if (selectedStore == null) return;
        
        isLoading = true;
        
        try
        {
            // Get inventory items for the selected store with their details
            var inventory = await Context.Inventories
                .Include(i => i.Item)
                .ThenInclude(item => item.CategoryNavigation)
                .Where(i => i.SiteId == selectedStore.SiteId && i.Item.Active == 1)
                .ToListAsync();

            allProducts = inventory.Select(i => new ProductViewModel
            {
                ItemId = i.ItemId,
                Name = i.Item.Name,
                Description = i.Item.Description ?? "No description available",
                Category = i.Item.Category,
                Sku = i.Item.Sku,
                StockQuantity = i.Quantity,
                CaseSize = i.Item.CaseSize,
                RetailPrice = i.Item.RetailPrice,
                ImageLocation = i.Item.ImageLocation
            }).ToList();
            
            // Save the selected store in the state container
            StateContainer.SelectedStore = selectedStore;
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            Snackbar.Add($"Error loading products: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // When store is selected, load the products
        if (selectedStore != null)
        {
            await LoadProducts();
        }
    }

    private void ApplyFilters()
    {
        var query = allProducts.AsQueryable();
        
        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            string term = searchTerm.ToLower();
            query = query.Where(p => 
                p.Name.ToLower().Contains(term) || 
                p.Description.ToLower().Contains(term) ||
                p.Sku.ToLower().Contains(term));
        }
        
        // Apply category filter
        if (selectedCategory != "All")
        {
            query = query.Where(p => p.Category == selectedCategory);
        }
        
        // Apply in-stock filter
        if (inStockOnly)
        {
            query = query.Where(p => p.StockQuantity > 0);
        }
        
        filteredProducts = query.ToList();
    }

    private void SearchProducts()
    {
        ApplyFilters();
    }

    private string GetProductImage(ProductViewModel product)
    {
        // Return the product image if available, otherwise a placeholder
        if (!string.IsNullOrEmpty(product.ImageLocation))
        {
            return product.ImageLocation;
        }
        return $"/images/products/placeholder.jpg";
    }

    private void OpenProductDialog(ProductViewModel product)
    {
        // Implement product detail dialog
    }

    private void AddToCart(ProductViewModel product)
    {
        var cartItem = new CartItem
        {
            ItemId = product.ItemId,
            Name = product.Name,
            Description = product.Description,
            Price = product.RetailPrice,
            Quantity = 1,
            ImageUrl = GetProductImage(product),
            StockQuantity = product.StockQuantity
        };
        
        StateContainer.AddToCart(cartItem);
        
        Snackbar.Add($"{product.Name} added to cart", Severity.Success);
        cartOpen = true;
    }

    private void UpdateCartItemQuantity(int itemId, int quantity)
    {
        StateContainer.UpdateCartItemQuantity(itemId, quantity);
    }

    private void RemoveFromCart(int itemId)
    {
        StateContainer.RemoveFromCart(itemId);
    }

    private decimal CalculateTotal()
    {
        return StateContainer.CartItems.Sum(item => item.Price * item.Quantity);
    }

    // View Model for products
    public class ProductViewModel
    {
        public int ItemId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public string Sku { get; set; }
        public int StockQuantity { get; set; }
        public int CaseSize { get; set; }
        public decimal RetailPrice { get; set; }
        public string ImageLocation { get; set; }
    }
}