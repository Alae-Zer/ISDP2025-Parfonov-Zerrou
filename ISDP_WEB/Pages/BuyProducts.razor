@page "/buy-products"
@using ISDP2025_Parfonov_Zerrou.Models
@using Microsoft.EntityFrameworkCore
@using ISDP_WEB.Pages.Services
@inject BestContext Context
@inject StateContainer StateContainer
@inject ISnackbar Snackbar


<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-4 pb-8">
    <MudText Typo="Typo.h4" Class="mb-4">Shop Products</MudText>

    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-2">Select Store Location</MudText>
        <MudSelect T="Site" Value="selectedStore" ValueChanged="StoreValueChanged" Label="Store" Variant="Variant.Outlined"
                   AnchorOrigin="Origin.BottomLeft" Class="mb-2" FullWidth="false"
                   AdornmentIcon="@Icons.Material.Filled.Store" AdornmentColor="Color.Primary">
            @if (stores != null)
            {
                @foreach (var store in stores)
                {
                    <MudSelectItem Value="@store">@store.SiteName</MudSelectItem>
                }

            }
        </MudSelect>
    </MudPaper>

    @if (isLoading)
    {
        <div class="d-flex justify-center my-4">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }

    else if (selectedStore == null)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">
            Please select a store to view available products.
        </MudAlert>
    }else{
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="searchTerm" Label="Search Products"
                              Variant="Variant.Outlined" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              AdornmentColor="Color.Primary"
                              Immediate="true"
                              OnKeyUp="@SearchProducts" />
            </MudItem>

            <MudItem xs="12" md="3">
                <MudSelect T="string" Value="selectedCategory" ValueChanged="OnCategoryChanged" Label="Category" Variant="Variant.Outlined">
                    <MudSelectItem Value="@("All")">All Categories</MudSelectItem>
                    @foreach (var category in categories){
                        <MudSelectItem Value="@category">@category</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" md="3" Class="d-flex align-center">
                <MudSwitch @bind-Value="inStockOnly" CheckedChanged="StockOnlyChanged" Color="Color.Primary" Label="In Stock Only" />
            </MudItem>
        </MudGrid>

        @if (!filteredProducts.Any())
        {
            <MudAlert Severity="Severity.Info" Class="my-4">
                No products match your search criteria. Try adjusting your filters.
            </MudAlert>
        }else{
            <MudGrid Class="mt-4">
                @foreach (var product in GetPaginatedData())
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Elevation="2" Class="h-100 d-flex flex-column">
                            <MudCardMedia Image="@GetProductImage(product)" Height="200" />

                            <MudCardContent Class="flex-grow-1">
                                <MudText Typo="Typo.h6" Class="mb-1">@product.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">SKU: @product.Sku</MudText>
                                <MudText Typo="Typo.body2" Class="mb-2">@product.Description</MudText>
                                <MudDivider Class="my-2" />

                                <div class="d-flex justify-space-between align-center">
                                    <MudText Typo="Typo.h6" Color="Color.Primary">$@product.RetailPrice.ToString("F2")</MudText>

                                    @if (product.StockQuantity > 0){
                                        <MudChip T="string" Color="Color.Success" Size="Size.Small">In Stock: @product.StockQuantity</MudChip>
                                    }else{
                                        <MudChip T="string" Color="Color.Error" Size="Size.Small">Out of Stock</MudChip>
                                    }
                                </div>
                            </MudCardContent>

                            <MudCardActions Class="d-flex justify-end">
                                <MudButton Variant="Variant.Text" Color="Color.Primary"
                                           @onclick="() => OpenProductDialog(product)">Details</MudButton>

                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                           Disabled="@(product.StockQuantity <= 0)"
                                           @onclick="() => AddToCart(product)">Add to Cart
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>

            <!-- Pagination Controls -->
            <div class="d-flex justify-center mt-4">
                <MudPagination Count="@(GetPageCount())" SelectedChanged="PageChanged" Color="Color.Primary" />
            </div>
        }
    }
</MudContainer>

@code {
    private List<Site> stores = new List<Site>();
    private Site selectedStore;
    private string searchTerm = "";
    private string selectedCategory = "All";

    private bool inStockOnly = false;

    private bool isLoading = true;



    private List<ProductViewModel> allProducts = new List<ProductViewModel>();

    private List<ProductViewModel> filteredProducts = new List<ProductViewModel>();

    private List<string> categories = new List<string>();



    // Pagination variables

    private int pageSize = 20;

    private int currentPage = 1;



    protected override async Task OnInitializedAsync()

    {

        await LoadStores();

        await LoadCategories();

        isLoading = false;

    }



    private async Task StoreValueChanged(Site value)

    {

        // Check if there are items in the current store's cart before switching

        if (selectedStore != null && selectedStore.SiteId != value?.SiteId)

        {

            // No need to show a dialog, just inform the user their previous store items are saved

            if (StateContainer.CartHasItemsForStore(selectedStore.SiteId))

            {

                Snackbar.Add($"Your items from {selectedStore.SiteName} are saved in your cart", Severity.Info);

            }

        }



        selectedStore = value;

        if (selectedStore != null)

        {

            // Reset to first page when store changes

            currentPage = 1;

            await LoadProducts();

        }

    }



    private async Task LoadStores()

    {

        try

        {

            int[] notStoreIds = { 1, 2, 3, 9999, 10000 };

            stores = await Context.Sites

                .Where(s => s.Active == 1 && !notStoreIds.Contains(s.SiteId))

                .OrderBy(s => s.SiteName)

                .ToListAsync();

        }

        catch (Exception ex)

        {

            Console.WriteLine($"Error loading stores: {ex.Message}");

            Snackbar.Add($"Error loading stores: {ex.Message}", Severity.Error);

        }

    }



    private async Task LoadCategories()

    {

        try

        {

            categories = await Context.Categories

                .Where(c => c.Active == 1)

                .Select(c => c.CategoryName)

                .ToListAsync();

        }

        catch (Exception ex)

        {

            Console.WriteLine($"Error loading categories: {ex.Message}");

            Snackbar.Add($"Error loading categories: {ex.Message}", Severity.Error);

        }

    }



    private void OnCategoryChanged(string category)

    {

        selectedCategory = category;

        // Reset to first page when category changes

        currentPage = 1;

        SearchProducts();

        StateHasChanged();

    }



    private void StockOnlyChanged(bool value)

    {

        inStockOnly = value;

        // Reset to first page when stock filter changes

        currentPage = 1;

        SearchProducts();

        StateHasChanged();

    }



    private async Task LoadProducts()

    {

        if (selectedStore == null) return;



        isLoading = true;

        StateHasChanged();



        try

        {

            var inventory = await Context.Inventories

                .Include(i => i.Item)

                .ThenInclude(item => item.CategoryNavigation)

                .Where(i => i.SiteId == selectedStore.SiteId && i.Item.Active == 1)

                .ToListAsync();



            allProducts = inventory.Select(i => new ProductViewModel

                {

                    ItemId = i.ItemId,

                    Name = i.Item.Name,

                    Description = i.Item.Description ?? "No description available",

                    Category = i.Item.Category,

                    Sku = i.Item.Sku,

                    StockQuantity = i.Quantity,

                    CaseSize = i.Item.CaseSize,

                    RetailPrice = i.Item.RetailPrice,

                    ImageLocation = i.Item.ImageLocation

                }).ToList();



            StateContainer.SelectedStore = selectedStore;



            ApplyFilters();

        }

        catch (Exception ex)

        {

            Console.WriteLine($"Error loading products: {ex.Message}");

            Snackbar.Add($"Error loading products: {ex.Message}", Severity.Error);

            allProducts.Clear();

            filteredProducts.Clear();

        }

        finally

        {

            isLoading = false;

            StateHasChanged();

        }

    }



    private void ApplyFilters()

    {

        var query = allProducts.AsQueryable();



        if (!string.IsNullOrWhiteSpace(searchTerm))

        {

            string term = searchTerm.ToLower();

            query = query.Where(p =>

                p.Name.ToLower().Contains(term) ||

                p.Description.ToLower().Contains(term) ||

                p.Sku.ToLower().Contains(term));

        }



        if (selectedCategory != "All")

        {

            query = query.Where(p => p.Category == selectedCategory);

        }



        if (inStockOnly)

        {

            query = query.Where(p => p.StockQuantity > 0);

        }



        filteredProducts = query.ToList();

    }



    private void SearchProducts()

    {

        // Reset to first page when search criteria changes

        currentPage = 1;

        ApplyFilters();

        StateHasChanged();

    }



    // Pagination methods

    private List<ProductViewModel> GetPaginatedData()

    {

        return filteredProducts

            .Skip((currentPage - 1) * pageSize)

            .Take(pageSize)

            .ToList();

    }



    private int GetPageCount()

    {

        return (int)Math.Ceiling(filteredProducts.Count / (double)pageSize);

    }



    private void PageChanged(int page)

    {

        currentPage = page;

        StateHasChanged();

    }



    private string GetProductImage(ProductViewModel product)

    {

        if (!string.IsNullOrEmpty(product.ImageLocation))

        {

            return product.ImageLocation;

        }

        return "images/default.png";

    }



    private void OpenProductDialog(ProductViewModel product)

    {

        // Implement product detail dialog

    }



    private void AddToCart(ProductViewModel product)

    {

        if (selectedStore == null)

        {

            Snackbar.Add("Please select a store first", Severity.Warning);

            return;

        }



        var cartItem = new CartItem

            {

                ItemId = product.ItemId,

                Name = product.Name,

                Description = product.Description,

                Price = product.RetailPrice,

                Quantity = 1,

                ImageUrl = GetProductImage(product),

                StockQuantity = product.StockQuantity

            };



        // Include store ID with the AddToCart call

        StateContainer.AddToCart(cartItem, selectedStore.SiteId, selectedStore.SiteName);



        Snackbar.Add($"{product.Name} added to cart from {selectedStore.SiteName}", Severity.Success);

    }



    private void UpdateCartItemQuantity(int itemId, int quantity)

    {

        // Use store ID if available

        if (selectedStore != null)

        {

            StateContainer.UpdateCartItemQuantity(selectedStore.SiteId, itemId, quantity);

        }

    }



    private void RemoveFromCart(int itemId)

    {

        // Use store ID if available

        if (selectedStore != null)

        {

            StateContainer.RemoveFromCart(selectedStore.SiteId, itemId);

        }

    }



    private decimal CalculateTotal()

    {

        // Calculate total for current store only

        if (selectedStore != null)

        {

            return StateContainer.GetStoreCartTotal(selectedStore.SiteId);

        }

        return 0;

    }



    public class ProductViewModel

    {

        public int ItemId { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public string Category { get; set; }

        public string Sku { get; set; }

        public int StockQuantity { get; set; }

        public int CaseSize { get; set; }

        public decimal RetailPrice { get; set; }

        public string ImageLocation { get; set; }

    }

    /// <summary>

    ///FIx images on web side they dont load

    /// </summary>

}