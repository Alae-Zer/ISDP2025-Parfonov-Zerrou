@page "/acadia/create-delivery"
@using ISDP2025_Parfonov_Zerrou.Models
@using ISDP2025_Parfonov_Zerrou.Functionality
@using Microsoft.EntityFrameworkCore
@using ISDP_WEB.Pages.Services
@using ISDP_WEB.Pages.Small_Components
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Create Delivery - Bullseye</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4">Create New Delivery</MudText>
        </MudCardHeader>
        
        <MudCardContent>
            <MudText Typo="Typo.body1" Class="mb-4">
                Select orders to include in a new delivery. The system will calculate the total weight and suggest appropriate vehicle type.
            </MudText>
            
            <MudDivider Class="my-4" />
            
            <!-- Delivery Form -->
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudDatePicker Label="Delivery Date" 
                                  @bind-Date="deliveryDate" 
                                  Required="true" 
                                  RequiredError="Delivery date is required" />
                </MudItem>
                
                <MudItem xs="12" sm="6" md="3">
                    <MudTimePicker Label="Delivery Time" 
                                  @bind-Time="deliveryTime" 
                                  Required="true"
                                  RequiredError="Delivery time is required" />
                </MudItem>
                
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="string" 
                              Label="Vehicle Type" 
                              @bind-Value="selectedVehicleType" 
                              Required="true" 
                              RequiredError="Vehicle type is required">
                        <MudSelectItem Value="@("Van")">Van (max 1,000 kg)</MudSelectItem>
                        <MudSelectItem Value="@("Small")">Small Truck (max 5,000 kg)</MudSelectItem>
                        <MudSelectItem Value="@("Medium")">Medium Truck (max 10,000 kg)</MudSelectItem>
                        <MudSelectItem Value="@("Heavy")">Heavy Truck (max 25,000 kg)</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" sm="6" md="3">
                    <MudNumericField @bind-Value="distanceCost" 
                                   Label="Distance Cost" 
                                   Adornment="Adornment.Start" 
                                   AdornmentText="$"
                                   Format="F2"
                                   Min="0" />
                </MudItem>
                
                <MudItem xs="12" Class="pb-4">
                    <MudTextField @bind-Value="notes" 
                                 Label="Notes" 
                                 Lines="2" />
                </MudItem>
            </MudGrid>

            <MudPaper Elevation="2" Class="pa-4 mb-4">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudText>
                        <strong>Selected Orders:</strong> @selectedOrders.Count |
                        <strong>Total Weight:</strong> @selectedOrdersTotalWeight.ToString("0.00") kg
                    </MudText>

                    <MudChip T="string" Color="GetWeightColor()" Size="Size.Medium">
                        @GetRecommendedVehicle()
                    </MudChip>

                    <MudSpacer />

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="CreateDeliveryWithSelectedOrders"
                               Disabled="selectedOrders.Count == 0">
                        Create Delivery
                    </MudButton>
                </MudStack>
            </MudPaper>
            
            <MudDivider Class="my-4" />
            
            <!-- Order Selection Table -->
            <MudText Typo="Typo.h6" Class="mb-2">Available Orders (Status: ASSEMBLED)</MudText>
            
            <MudGrid Class="mb-2">
                <MudItem xs="12" sm="12" md="4">
                    <MudTextField @bind-Value="searchText" 
                                 Label="Search" 
                                 Adornment="Adornment.Start" 
                                 AdornmentIcon="@Icons.Material.Filled.Search"
                                 FullWidth="true"
                                 Immediate="true"
                                 TextChanged="ApplyFilters"/>
                </MudItem>
            </MudGrid>
            
            
            
            <MudTable Items="@filteredOrders" 
                     MultiSelection="true"
                     @bind-SelectedItems="selectedOrders"
                     Hover="true" 
                     Striped="true"
                     Loading="isLoading"
                     LoadingProgressColor="Color.Primary"
                     T="Txn">
                <HeaderContent>
                    <MudTh>Order #</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Ship Date</MudTh>
                    <MudTh>Store</MudTh>
                    <MudTh>Distance</MudTh>
                    <MudTh>Weight</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Order #">@context.TxnId</MudTd>
                    <MudTd DataLabel="Type">@context.TxnType</MudTd>
                    <MudTd DataLabel="Ship Date">@context.ShipDate.ToString("yyyy-MM-dd")</MudTd>
                    <MudTd DataLabel="Store">@context.SiteIdtoNavigation?.SiteName</MudTd>
                    <MudTd DataLabel="Distance">@context.SiteIdtoNavigation?.DistanceFromWh km</MudTd>
                    <MudTd DataLabel="Weight">@CalculateOrderWeight(context).ToString("0.00") kg</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
                <NoRecordsContent>
                    <MudText>No orders found with ASSEMBLED status.</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudCardContent>
        
        <MudCardActions>
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Secondary"
                      OnClick="GoBack"
                      StartIcon="@Icons.Material.Filled.ArrowBack">
                Back to Deliveries
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>


@code {
    // State variables
    private bool isLoading = false;
    private List<Txn> allOrders = new List<Txn>();
    private List<Txn> filteredOrders = new List<Txn>();
    private HashSet<Txn> selectedOrders = new HashSet<Txn>();
    private List<Site> stores = new List<Site>();
    
    // Filter variables
    private string orderTypeFilter = "All";
    private int? storeFilter = null;
    private string searchText = "";
    
    // Delivery form fields
    private DateTime? deliveryDate = DateTime.Today;
    private TimeSpan? deliveryTime = new TimeSpan(9, 0, 0); // 9:00 AM default
    private string selectedVehicleType = "Medium";
    private decimal distanceCost = 0;
    private string notes = "";
    
    // Selected entity
    private Txn selectedOrder;
    private List<Txnitem> selectedOrderItems = new();
    
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        
        try
        {
            await LoadStores();
            await LoadOrders();
            
            // Set initial recommended vehicle type based on weight
            UpdateRecommendedVehicle();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing page: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadStores()
    {
        try
        {
            using (var context = new BestContext())
            {
                // Get all active stores (excluding warehouse, corporate, etc.)
                stores = await context.Sites
                    .Where(s => s.Active == 1 && 
                               s.SiteId != 1 && // Corporate
                               s.SiteId != 2 && // Warehouse
                               s.SiteId != 3 && // Warehouse Bay
                               s.SiteId != 9999 && // Truck
                               s.SiteId != 10000) // Online
                    .OrderBy(s => s.SiteName)
                    .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading stores: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task LoadOrders()
    {
        try
        {
            using (var context = new BestContext())
            {
                // Get orders with ASSEMBLED status
                allOrders = await context.Txns
                    .Include(t => t.SiteIdtoNavigation)
                    .Include(t => t.SiteIdfromNavigation)
                    .Include(t => t.Txnitems)
                        .ThenInclude(ti => ti.Item)
                    .Where(t => t.TxnStatus == "ASSEMBLED" && 
                               t.DeliveryId == null &&
                               (t.TxnType == "Store Order" || 
                                t.TxnType == "Emergency Order" || 
                                t.TxnType == "Back Order"))
                    .OrderBy(t => t.ShipDate)
                    .ToListAsync();
                
                // Apply initial filters
                ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading orders: {ex.Message}", Severity.Error);
        }
    }
    
    private void ApplyFilters()
    {
        filteredOrders = allOrders;
        
        // Apply order type filter
        if (orderTypeFilter != "All")
        {
            filteredOrders = filteredOrders
                .Where(o => o.TxnType == orderTypeFilter)
                .ToList();
        }
        
        // Apply store filter
        if (storeFilter.HasValue)
        {
            filteredOrders = filteredOrders
                .Where(o => o.SiteIdto == storeFilter.Value)
                .ToList();
        }
        
        // Apply search text
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            filteredOrders = filteredOrders
                .Where(o => 
                    o.TxnId.ToString().Contains(searchText) ||
                    o.SiteIdtoNavigation.SiteName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    o.TxnType.Contains(searchText, StringComparison.OrdinalIgnoreCase)
                )
                .ToList();
        }
        
        // Clear selected orders that are no longer in filtered list
        selectedOrders = new HashSet<Txn>(selectedOrders.Where(o => filteredOrders.Contains(o)));
        
        // Update recommended vehicle
        UpdateRecommendedVehicle();
    }
    
    private decimal CalculateOrderWeight(Txn order)
    {
        if (order == null)
            return 0;
            
        return order.Txnitems?.Sum(i => i.Item.Weight * i.Quantity) ?? 0;
    }
    
    private decimal selectedOrdersTotalWeight => selectedOrders.Sum(o => CalculateOrderWeight(o));
    
    private string GetRecommendedVehicle()
    {
        if (selectedOrdersTotalWeight <= 0)
            return "Select orders to get a recommendation";
            
        if (selectedOrdersTotalWeight <= 1000)
            return "Recommended: Van (up to 1,000 kg)";
        else if (selectedOrdersTotalWeight <= 5000)
            return "Recommended: Small Truck (up to 5,000 kg)";
        else if (selectedOrdersTotalWeight <= 10000)
            return "Recommended: Medium Truck (up to 10,000 kg)";
        else
            return "Recommended: Heavy Truck (up to 25,000 kg)";
    }
    
    private void UpdateRecommendedVehicle()
    {
        if (selectedOrdersTotalWeight <= 0)
            selectedVehicleType = "Medium"; // Default
        else if (selectedOrdersTotalWeight <= 1000)
            selectedVehicleType = "Van";
        else if (selectedOrdersTotalWeight <= 5000)
            selectedVehicleType = "Small";
        else if (selectedOrdersTotalWeight <= 10000)
            selectedVehicleType = "Medium";
        else
            selectedVehicleType = "Heavy";
    }
    
    private Color GetWeightColor()
    {
        if (selectedOrdersTotalWeight <= 0)
            return Color.Default;
        else if (selectedOrdersTotalWeight <= 1000)
            return Color.Success;
        else if (selectedOrdersTotalWeight <= 5000)
            return Color.Info;
        else if (selectedOrdersTotalWeight <= 10000)
            return Color.Warning;
        else
            return Color.Error;
    }
    
    private async Task CreateDeliveryWithSelectedOrders()
    {
        if (!selectedOrders.Any())
        {
            Snackbar.Add("Please select at least one order", Severity.Warning);
            return;
        }
        
        if (!deliveryDate.HasValue)
        {
            Snackbar.Add("Delivery date is required", Severity.Warning);
            return;
        }
        
        if (!deliveryTime.HasValue)
        {
            Snackbar.Add("Delivery time is required", Severity.Warning);
            return;
        }
        
        if (string.IsNullOrWhiteSpace(selectedVehicleType))
        {
            Snackbar.Add("Vehicle type is required", Severity.Warning);
            return;
        }
        
        // Check if selected vehicle can handle the weight
        decimal maxWeight = 0;
        switch (selectedVehicleType)
        {
            case "Van": maxWeight = 1000; break;
            case "Small": maxWeight = 5000; break;
            case "Medium": maxWeight = 10000; break;
            case "Heavy": maxWeight = 25000; break;
        }
        
        // If weight exceeds capacity, show a warning dialog
        // If weight exceeds capacity, show a warning dialog
        if (selectedOrdersTotalWeight > maxWeight)
        {
            var parameters = new DialogParameters
    {
        { "ContentText", $"The total weight ({selectedOrdersTotalWeight:0.00} kg) exceeds the capacity of the selected vehicle ({maxWeight} kg). Do you want to continue anyway?" },
        { "ButtonText", "Continue" },
        { "Color", Color.Warning }
    };
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            var dialog = await DialogService.Show<Confirm>("Weight Warning", parameters, options).Result;

            if (dialog.Canceled)
                return;
        }
        
        try
        {
            // Create the delivery
            int deliveryId = DeliveryManager.CreateDelivery(
                selectedVehicleType,
                notes,
                distanceCost
            );
            
            // Assign orders to the delivery
            int successCount = 0;
            foreach (var order in selectedOrders)
            {
                try
                {
                    // Using employee ID 9999 for Acadia
                    var employee = new Employee { EmployeeID = 9999 };
                    bool success = DeliveryManager.AssignOrderToDelivery(
                        order.TxnId,
                        deliveryId,
                        employee
                    );
                    
                    if (success)
                        successCount++;
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error assigning order #{order.TxnId}: {ex.Message}", Severity.Error);
                }
            }
            
            Snackbar.Add($"Delivery #{deliveryId} created successfully with {successCount} orders", Severity.Success);
            
            // Navigate back to deliveries page
            NavigationManager.NavigateTo("/acadia/deliveries");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating delivery: {ex.Message}", Severity.Error);
        }
    }
    
    private void GoBack()
    {
        NavigationManager.NavigateTo("/acadia/deliveries");
    }
    public class VehicleCost
    {
        public string Type { get; set; }
        public decimal MaxWeight { get; set; }
        public decimal CostPerKm { get; set; }
        public decimal HourlyRate { get; set; }
    }

    public static class DeliveryCostCalculator
    {
        public static List<VehicleCost> VehicleCosts = new()
    {
        new VehicleCost { Type = "Van", MaxWeight = 1000, CostPerKm = 1.25m, HourlyRate = 15 },
        new VehicleCost { Type = "Light", MaxWeight = 3000, CostPerKm = 1.75m, HourlyRate = 25 },
        new VehicleCost { Type = "Medium", MaxWeight = 10000, CostPerKm = 2.50m, HourlyRate = 30 },
        new VehicleCost { Type = "Heavy", MaxWeight = 25000, CostPerKm = 3.50m, HourlyRate = 45 }
    };
    }
}