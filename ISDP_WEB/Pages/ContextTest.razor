@page "/context-test"
@using ISDP2025_Parfonov_Zerrou.Models
@using Microsoft.EntityFrameworkCore
@inject BestContext Context
@implements IDisposable

<h3>Database Connection Test</h3>

<button class="btn btn-primary @(isLoading ? "disabled" : "")" @onclick="LoadSites">
    @if (isLoading)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        <span> Loading...</span>
    }
    else
    {
        <span>Load Sites</span>
    }
</button>

@if (sites != null)
{
    <table class="table mt-4">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>City</th>
                <th>Province</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var site in sites)
            {
                <tr>
                    <td>@site.SiteId</td>
                    <td>@site.SiteName</td>
                    <td>@site.City</td>
                    <td>@site.ProvinceId</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Site> sites;
    private bool isLoading = false;
    private CancellationTokenSource cts = new CancellationTokenSource();

    private async Task LoadSites()
    {
        try
        {
            isLoading = true;
            // Use async operations to prevent UI blocking
            sites = await Context.Sites
                .AsNoTracking() // Improves performance for read-only data
                .Take(10)
                .ToListAsync(cts.Token);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sites: {ex.Message}");
            // Add proper error handling here
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Ensure UI updates
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}