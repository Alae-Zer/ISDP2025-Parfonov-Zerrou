@page "/acadia/driver"
@using ISDP2025_Parfonov_Zerrou.Models
@using Microsoft.EntityFrameworkCore
@using ISDP_WEB.Pages.Small_Components
@inject NavigationManager NavigationManager
@inject BestContext Context
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Driver Route - Bullseye</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4">My Deliveries</MudText>
        </MudCardHeader>
        
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="8">
                    <!-- Date Selection -->
                    <MudDatePicker @bind-Date="selectedDate"
                                   Label="Select Date"
                                   DateFormat="yyyy-MM-dd"
                                   Editable="true" />
                </MudItem>
                
                <MudItem xs="12" md="4" Class="d-flex align-center justify-end">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.Refresh"
                              OnClick="RefreshData">
                        Refresh
                    </MudButton>
                </MudItem>
            </MudGrid>
            
            <MudDivider Class="my-4" />
            
            @if (isLoading)
            {
                <div class="d-flex justify-center my-4">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </div>
            }
            else if (!deliveries.Any())
            {
                <MudAlert Severity="Severity.Info" Class="my-4">
                    No deliveries scheduled for @selectedDate?.ToString("yyyy-MM-dd")
                </MudAlert>
            }
            else
            {
                <MudText Typo="Typo.h6" Class="mb-3">Scheduled Deliveries</MudText>
                
                @foreach (var delivery in deliveries)
                {
                    <MudCard Elevation="2" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">
                                    Delivery #@delivery.DeliveryId - @delivery.DeliveryDate.ToString("hh:mm tt")
                                </MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudChip T="string" Color="@GetDeliveryStatusColor(delivery)" Size="Size.Small">
                                    @GetDeliveryStatus(delivery)
                                </MudChip>
                            </CardHeaderActions>
                        </MudCardHeader>
                        
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.body2">
                                        <strong>Vehicle:</strong> @delivery.VehicleType
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <strong>Stores:</strong> @GetDeliveryStores(delivery.DeliveryId)
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <strong>Total Weight:</strong> @GetDeliveryWeight(delivery.DeliveryId).ToString("0.00") kg
                                    </MudText>
                                </MudItem>
                                
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.body2">
                                        <strong>Orders:</strong> @GetOrderCount(delivery.DeliveryId)
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <strong>Distance Cost:</strong> $@delivery.DistanceCost.ToString("0.00")
                                    </MudText>
                                    @if (!string.IsNullOrEmpty(delivery.Notes))
                                    {
                                        <MudText Typo="Typo.body2">
                                            <strong>Notes:</strong> @delivery.Notes
                                        </MudText>
                                    }
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" 
                                      Color="Color.Primary"
                                      Href="@($"/acadia/delivery/{delivery.DeliveryId}")">
                                View Details
                            </MudButton>
                            
                            <MudSpacer />
                            
                            @if (GetDeliveryStatus(delivery) == "Ready for Pickup")
                            {
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Primary"
                                          OnClick="@(() => StartDelivery(delivery))">
                                    Start Delivery
                                </MudButton>
                            }
                            else if (GetDeliveryStatus(delivery) == "In Progress")
                            {
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Success"
                                          OnClick="@(() => ViewActiveDelivery(delivery))">
                                    Continue Delivery
                                </MudButton>
                            }
                            else if (GetDeliveryStatus(delivery) == "Completed")
                            {
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Default"
                                          Disabled="true">
                                    Completed
                                </MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                }
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool isLoading = true;
    private DateTime? selectedDate = DateTime.Today;
    private List<Delivery> deliveries = new List<Delivery>();
    private Dictionary<int, List<Txn>> deliveryOrders = new Dictionary<int, List<Txn>>();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            DateTime date = selectedDate ?? DateTime.Today;
            
            using (var context = new BestContext())
            {
                // Load deliveries for selected date
                deliveries = await context.Deliveries
                    .Where(d => d.DeliveryDate.Date == date.Date)
                    .OrderBy(d => d.DeliveryDate)
                    .ToListAsync();
                
                // Load orders for each delivery
                deliveryOrders.Clear();
                foreach (var delivery in deliveries)
                {
                    var orders = await context.Txns
                        .Include(t => t.SiteIdtoNavigation)
                        .Where(t => t.DeliveryId == delivery.DeliveryId)
                        .ToListAsync();
                    
                    deliveryOrders[delivery.DeliveryId] = orders;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading deliveries: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void DateChanged(DateTime? date)
    {
        selectedDate = date;
        LoadData();
    }
    
    private async Task RefreshData()
    {
        await LoadData();
        Snackbar.Add("Data refreshed", Severity.Success);
    }
    
    private string GetDeliveryStores(int deliveryId)
    {
        if (deliveryOrders.TryGetValue(deliveryId, out var orders))
        {
            var storeNames = orders
                .Select(o => o.SiteIdtoNavigation?.SiteName)
                .Where(n => n != null)
                .Distinct()
                .ToList();

            return string.Join(", ", storeNames);
        }

        return "None";
    }

    private decimal GetDeliveryWeight(int deliveryId)
    {
        if (deliveryOrders.TryGetValue(deliveryId, out var orders))
        {
            return orders.Sum(o => CalculateOrderWeight(o));
        }

        return 0;
    }

    private int GetOrderCount(int deliveryId)
    {
        if (deliveryOrders.TryGetValue(deliveryId, out var orders))
        {
            return orders.Count;
        }

        return 0;
    }

    private decimal CalculateOrderWeight(Txn order)
    {
        if (order == null)
            return 0;

        using (var context = new BestContext())
        {
            var items = context.Txnitems
                .Include(i => i.Item)
                .Where(i => i.TxnId == order.TxnId)
                .ToList();

            return items.Sum(i => i.Item?.Weight * i.Quantity ?? 0);
        }
    }

    private string GetDeliveryStatus(Delivery delivery)
    {
        if (!deliveryOrders.TryGetValue(delivery.DeliveryId, out var orders))
        {
            return "Unknown";
        }

        if (orders.All(o => o.TxnStatus == "DELIVERED" || o.TxnStatus == "COMPLETE"))
        {
            return "Completed";
        }

        if (orders.Any(o => o.TxnStatus == "IN TRANSIT"))
        {
            return "In Progress";
        }

        if (orders.All(o => o.TxnStatus == "ASSEMBLED"))
        {
            return "Ready for Pickup";
        }

        return "Preparation";
    }

    private Color GetDeliveryStatusColor(Delivery delivery)
    {
        string status = GetDeliveryStatus(delivery);

        return status switch
        {
            "Completed" => Color.Success,
            "In Progress" => Color.Primary,
            "Ready for Pickup" => Color.Warning,
            "Preparation" => Color.Info,
            _ => Color.Default
        };
    }

    private async Task StartDelivery(Delivery delivery)
    {
        if (!deliveryOrders.TryGetValue(delivery.DeliveryId, out var orders))
        {
            Snackbar.Add("No orders found for this delivery", Severity.Warning);
            return;
        }

        if (!orders.All(o => o.TxnStatus == "ASSEMBLED"))
        {
            Snackbar.Add("Not all orders are ready for pickup", Severity.Warning);
            return;
        }

        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to start this delivery? This will update all orders to 'IN TRANSIT' status." },
            { "ButtonText", "Start Delivery" },
            { "Color", Color.Primary }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.Show<Confirm>("Confirm Start Delivery", parameters, options).Result;

        if (dialog.Canceled)
            return;

        try
        {
            using (var context = new BestContext())
            {
                // Get fresh list of orders
                var dbOrders = await context.Txns
                    .Where(t => t.DeliveryId == delivery.DeliveryId)
                    .ToListAsync();

                foreach (var order in dbOrders)
                {
                    order.TxnStatus = "IN TRANSIT";

                    // Create audit record
                    var txnAudit = new Txnaudit
                        {
                            TxnId = order.TxnId,
                            EmployeeId = 9999, // Acadia Driver ID
                            TxnType = order.TxnType,
                            Status = "IN TRANSIT",
                            TxnDate = DateTime.Now,
                            SiteId = order.SiteIdto,
                            DeliveryId = delivery.DeliveryId,
                            Notes = "Order picked up for delivery"
                        };

                    context.Txnaudits.Add(txnAudit);
                }

                await context.SaveChangesAsync();

                Snackbar.Add("Delivery started successfully", Severity.Success);

                // Navigate to active delivery screen
                NavigationManager.NavigateTo($"/acadia/active-delivery/{delivery.DeliveryId}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting delivery: {ex.Message}", Severity.Error);
        }
    }

    private void ViewActiveDelivery(Delivery delivery)
    {
        NavigationManager.NavigateTo($"/acadia/active-delivery/{delivery.DeliveryId}");
    }
}