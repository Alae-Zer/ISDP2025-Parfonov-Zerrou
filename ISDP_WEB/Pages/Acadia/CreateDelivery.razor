@page "/acadia/create-delivery"
@using ISDP2025_Parfonov_Zerrou.Models
@using ISDP2025_Parfonov_Zerrou.Functionality
@using Microsoft.EntityFrameworkCore
@using ISDP_WEB.Pages.Services
@using ISDP_WEB.Pages.Small_Components
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Create Delivery - Bullseye</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4">Create New Delivery</MudText>
        </MudCardHeader>

        <MudCardContent>
            <MudText Typo="Typo.body1" Class="mb-4">
                Select orders to include in a new delivery. The system will calculate the total weight and suggest appropriate vehicle type.
            </MudText>

            <MudDivider Class="my-4" />

            <!-- Delivery Form -->
            <MudGrid>
                <MudItem xs="12" sm="12" md="6">
                    <MudDatePicker Label="Delivery Date"
                                   @bind-Date="deliveryDate"
                                   Required="true"
                                   RequiredError="Delivery date is required" />
                </MudItem>

                <MudItem xs="12" sm="12" md="6">
                    <MudSelect T="string"
                               Label="Vehicle Type"
                               Value="selectedVehicleType"
                               ValueChanged="@((string value) => VehicleTypeChanged(value))"
                               Required="true"
                               RequiredError="Vehicle type is required">
                        <MudSelectItem Value="@("Van")">Van (max 1,000 kg)</MudSelectItem>
                        <MudSelectItem Value="@("Small")">Small Truck (max 5,000 kg)</MudSelectItem>
                        <MudSelectItem Value="@("Medium")">Medium Truck (max 10,000 kg)</MudSelectItem>
                        <MudSelectItem Value="@("Heavy")">Heavy Truck (max 25,000 kg)</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" Class="pb-4">
                    <MudTextField @bind-Value="notes"
                                  Label="Notes"
                                  Lines="2" />
                </MudItem>
            </MudGrid>

            <MudPaper Elevation="2" Class="pa-4 mb-4">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudText>
                        <strong>Selected Orders:</strong> @selectedOrders.Count |
                        <strong>Total Weight:</strong> @totalWeight.ToString("0.00") kg
                    </MudText>

                    <MudChip T="string" Color="GetWeightColor()" Size="Size.Medium">
                        @GetRecommendedVehicle()
                    </MudChip>

                    <MudSpacer />

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="CreateDeliveryWithSelectedOrders"
                               Disabled="selectedOrders.Count == 0">
                        Create Delivery
                    </MudButton>
                </MudStack>
            </MudPaper>

            <MudDivider Class="my-4" />

            <!-- Order Selection Table -->
            <MudText Typo="Typo.h6" Class="mb-2">Available Orders (Status: ASSEMBLED)</MudText>

            <MudGrid Class="mb-2">
                <MudItem xs="12" sm="12" md="4">
                    <MudTextField @bind-Value="searchText"
                                  Label="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  FullWidth="true"
                                  Immediate="true"
                                  TextChanged="ApplyFilters" />
                </MudItem>
            </MudGrid>

            <MudTable Items="@filteredOrders"
                      MultiSelection="true"
                      @bind-SelectedItems="selectedOrders"
                      Hover="true"
                      Striped="true"
                      Loading="isLoading"
                      LoadingProgressColor="Color.Primary"
                      T="Txn">
                <HeaderContent>
                    <MudTh>Order #</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Ship Date</MudTh>
                    <MudTh>Store</MudTh>
                    <MudTh>Distance</MudTh>
                    <MudTh>Weight</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Order #">@context.TxnId</MudTd>
                    <MudTd DataLabel="Type">@context.TxnType</MudTd>
                    <MudTd DataLabel="Ship Date">@context.ShipDate.ToString("yyyy-MM-dd")</MudTd>
                    <MudTd DataLabel="Store">@context.SiteIdtoNavigation?.SiteName</MudTd>
                    <MudTd DataLabel="Distance">@context.SiteIdtoNavigation?.DistanceFromWh km</MudTd>
                    <MudTd DataLabel="Weight">@CalculateOrderWeight(context).ToString("0.00") kg</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
                <NoRecordsContent>
                    <MudText>No orders found with ASSEMBLED status.</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       OnClick="GoBack"
                       StartIcon="@Icons.Material.Filled.ArrowBack">
                Back to Deliveries
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>


@code {
    // State variables
    private bool isLoading = false;
    private List<Txn> allOrders = new List<Txn>();
    private List<Txn> filteredOrders = new List<Txn>();
    private HashSet<Txn> selectedOrders = new HashSet<Txn>();
    private List<Site> stores = new List<Site>();

    // Filter variables
    private string orderTypeFilter = "All";
    private int? storeFilter = null;
    private string searchText = "";

    // Delivery form fields
    private DateTime? deliveryDate = DateTime.Today;
    private string selectedVehicleType = "Medium";
    private decimal distanceCost = 0;
    private string notes = "";
    decimal totalWeight = 0;

    // Selected entity
    private List<Txnitem> selectedOrderItems = new();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            await LoadOrders();

            // Set initial recommended vehicle type based on weight
            UpdateRecommendedVehicle();

            // Calculate initial distance cost
            CalculateDistanceCost();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing page: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void VehicleTypeChanged(string value)
    {
        selectedVehicleType = value;
        CalculateDistanceCost();
    }

    private async Task LoadOrders()
    {
        try
        {
            using (var context = new BestContext())
            {
                // Get orders with ASSEMBLED status
                allOrders = await context.Txns
                    .Include(t => t.SiteIdtoNavigation)
                    .Include(t => t.SiteIdfromNavigation)
                    .Include(t => t.Txnitems)
                        .ThenInclude(ti => ti.Item)
                    .Where(t => t.TxnStatus == "ASSEMBLED" &&
                               t.DeliveryId == null &&
                               t.TxnType == "Store Order")
                    .OrderBy(t => t.ShipDate)
                    .ToListAsync();

                // Apply initial filters
                ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading orders: {ex.Message}", Severity.Error);
        }
    }

    private void ApplyFilters()
    {
        filteredOrders = allOrders;

        // Apply the filters one after the other if they exist
        if (orderTypeFilter != "All")
        {
            filteredOrders = filteredOrders
                .Where(o => o.TxnType == orderTypeFilter)
                .ToList();
        }

        
        if (storeFilter.HasValue)
        {
            filteredOrders = filteredOrders
                .Where(o => o.SiteIdto == storeFilter.Value)
                .ToList();
        }


        if (!string.IsNullOrWhiteSpace(searchText))
        {
            filteredOrders = filteredOrders
                .Where(o =>
                    o.TxnId.ToString().Contains(searchText) ||
                    o.SiteIdtoNavigation.SiteName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    o.TxnType.Contains(searchText, StringComparison.OrdinalIgnoreCase)
                )
                .ToList();
        }

        HashSet<Txn> newSelectedOrders = new HashSet<Txn>();
        foreach (var order in selectedOrders)
        {
            bool isInFilteredList = false;
            foreach (var filteredOrder in filteredOrders)
            {
                if (filteredOrder.TxnId == order.TxnId)
                {
                    isInFilteredList = true;
                    break;
                }
            }

            if (isInFilteredList)
            {
                newSelectedOrders.Add(order);
            }
        }
        selectedOrders = newSelectedOrders;

        // Update recommended vehicle
        UpdateRecommendedVehicle();

        // Update distance cost
        CalculateDistanceCost();
    }

    private decimal CalculateOrderWeight(Txn order)
    {
        if (order == null)
            return 0;

        totalWeight = 0;
            foreach (var item in order.Txnitems)
            {
                if (item.Item != null)
                {
                    totalWeight += item.Item.Weight * item.Quantity;
                }
            }

        return totalWeight;
    }

    private void CalculateDistanceCost()
    {
        if (selectedOrders.Count == 0)
        {
            distanceCost = 0;
            return;
        }

        try
        {
            var ordersList = selectedOrders.ToList();

            // Get vehicle cost per km from DeliveryManager
            DeliveryManager.VehicleInfo vehicle = null;
            foreach (var v in DeliveryManager.VehicleTypes)
            {
                if (v.Type == selectedVehicleType)
                {
                    vehicle = v;
                    break;
                }
            }

            if (vehicle == null)
            {
                distanceCost = 0;
                return;
            }

            // Group orders by destination site
            var destinations = ordersList
                .Select(o => o.SiteIdtoNavigation)
                .DistinctBy(s => s.SiteId)
                .ToList();

            decimal totalDistance = 0;
            foreach (var site in destinations)
            {
                totalDistance += site.DistanceFromWh * 2;
            }

            // Calculate distance cost
            distanceCost = totalDistance * vehicle.CostPerKm;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error calculating distance cost: {ex.Message}", Severity.Error);
            distanceCost = 0;
        }
    }

    private decimal CalculateSelectedOrdersTotalWeight()
    {
        decimal totalWeight = 0;
        foreach (var order in selectedOrders)
        {
            totalWeight += CalculateOrderWeight(order);
        }
        return totalWeight;
    }

    private string GetRecommendedVehicle()
    {
        decimal totalWeight = CalculateSelectedOrdersTotalWeight();

        if (totalWeight <= 0)
            return "Select orders to get a recommendation";

        if (totalWeight <= 1000)
            return "Recommended: Van (up to 1,000 kg)";
        else if (totalWeight <= 5000)
            return "Recommended: Small Truck (up to 5,000 kg)";
        else if (totalWeight <= 10000)
            return "Recommended: Medium Truck (up to 10,000 kg)";
        else
            return "Recommended: Heavy Truck (up to 25,000 kg)";
    }

    private void UpdateRecommendedVehicle()
    {
        decimal totalWeight = CalculateSelectedOrdersTotalWeight();

        if (totalWeight <= 0)
            selectedVehicleType = "Medium"; // Default
        else if (totalWeight <= 1000)
            selectedVehicleType = "Van";
        else if (totalWeight <= 5000)
            selectedVehicleType = "Small";
        else if (totalWeight <= 10000)
            selectedVehicleType = "Medium";
        else
            selectedVehicleType = "Heavy";

        // Update distance cost when vehicle type changes
        CalculateDistanceCost();
    }

    private Color GetWeightColor()
    {
        decimal totalWeight = CalculateSelectedOrdersTotalWeight();

        if (totalWeight <= 0)
            return Color.Default;
        else if (totalWeight <= 1000)
            return Color.Success;
        else if (totalWeight <= 5000)
            return Color.Info;
        else if (totalWeight <= 10000)
            return Color.Warning;
        else
            return Color.Error;
    }

    private async Task CreateDeliveryWithSelectedOrders()
    {
        if (!selectedOrders.Any())
        {
            Snackbar.Add("Please select at least one order", Severity.Warning);
            return;
        }

        // Update distance cost before creating delivery
        CalculateDistanceCost();

        // Check if selected vehicle can handle the weight
        decimal maxWeight = 0;
        switch (selectedVehicleType)
        {
            case "Van": maxWeight = 1000; break;
            case "Small": maxWeight = 5000; break;
            case "Medium": maxWeight = 10000; break;
            case "Heavy": maxWeight = 25000; break;
        }

        decimal totalWeight = CalculateSelectedOrdersTotalWeight();
        if (totalWeight > maxWeight)
        {
            var parameters = new DialogParameters
            {
                { "ContentText", $"The total weight ({totalWeight:0.00} kg) exceeds the capacity of the selected vehicle ({maxWeight} kg). Do you want to continue anyway?" },
                { "ButtonText", "Continue" },
                { "Color", Color.Warning }
            };
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            var dialog = await DialogService.Show<Confirm>("Weight Warning", parameters, options).Result;

            if (dialog.Canceled)
                return;
        }

        try
        {
            // Create the delivery
            using (var context = new BestContext())
            {
                // Create new delivery
                var delivery = new Delivery
                    {
                        DeliveryDate = deliveryDate.Value.Add(new TimeSpan(9,0,0)),
                        DistanceCost = distanceCost,
                        VehicleType = selectedVehicleType,
                        Notes = notes
                    };

                context.Deliveries.Add(delivery);
                context.SaveChanges();

                int deliveryId = delivery.DeliveryId;

                // Assign orders to the delivery
                int successCount = 0;
                foreach (var order in selectedOrders)
                {
                    try
                    {
                        var txn = context.Txns.Find(order.TxnId);
                        if (txn != null)
                        {
                            // Update txn with delivery id
                            txn.DeliveryId = deliveryId;
                            context.SaveChanges();

                            // Add audit record
                            AuditTransactions.LogActivity(
                                new Employee { EmployeeID = 9999 }, // Acadia driver
                                txn.TxnId,
                                txn.TxnType,
                                txn.TxnStatus,
                                txn.SiteIdto,
                                deliveryId,
                                $"Order assigned to delivery #{deliveryId}"
                            );

                            successCount++;
                        }
                    }
                    catch (Exception ex)
                    {
                        Snackbar.Add($"Error assigning order #{order.TxnId}: {ex.Message}", Severity.Error);
                    }
                }

                Snackbar.Add($"Delivery #{deliveryId} created successfully with {successCount} orders", Severity.Success);

                // Navigate back to deliveries page
                NavigationManager.NavigateTo("/acadia/deliveries");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating delivery: {ex.Message}", Severity.Error);
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/acadia/deliveries");
    }
}