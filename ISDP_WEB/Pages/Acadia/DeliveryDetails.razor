@page "/acadia/delivery/{DeliveryId:int}"
@using ISDP2025_Parfonov_Zerrou.Models
@using Microsoft.EntityFrameworkCore
@inject BestContext Context
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Delivery Details - Bullseye</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4">Delivery #@DeliveryId Details</MudText>
        </MudCardHeader>
        
        <MudCardContent>
            @if (isLoading)
            {
                <!-- this here to show the loading if nothing is loaded -->
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else if (delivery == null)
            {
                <!-- if there is no deliveries -->
                <MudAlert Severity="Severity.Error">Delivery not found</MudAlert>
            }
            else
            {
                <!-- if there are deliveries -->
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudPaper Elevation="0" Class="pa-4">
                            <MudText Typo="Typo.h6" Class="mb-4">Delivery Information</MudText>

                            <MudList T="string" Dense="true">
                                <MudListItem>
                                    <MudText Typo="Typo.body1">
                                        <b>Date & Time:</b> @delivery.DeliveryDate.ToString("yyyy-MM-dd HH:mm")
                                    </MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">
                                        <b>Vehicle Type:</b> @delivery.VehicleType
                                    </MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">
                                        <b>Distance Cost:</b> $@delivery.DistanceCost.ToString("0.00")
                                    </MudText>
                                </MudListItem>
                                @if (!string.IsNullOrEmpty(delivery.Notes))
                                {
                                    <MudListItem>
                                        <MudText Typo="Typo.body1">
                                            <b>Notes:</b> @delivery.Notes
                                        </MudText>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudPaper>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudPaper Elevation="0" Class="pa-4">
                            <MudText Typo="Typo.h6" Class="mb-4">Summary</MudText>

                            <MudList T="string" Dense="true">
                                <MudListItem>
                                    <MudText Typo="Typo.body1">
                                        <b>Total Orders:</b> @orders.Count
                                    </MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">
                                        <b>Total Weight:</b> @totalWeight.ToString("0.00") kg
                                    </MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">
                                        <b>Stores:</b> @string.Join(", ", storeNames)
                                    </MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">
                                        <b>Status:</b> <MudChip Size="Size.Small" Color="Color.Success">Ready for Pickup</MudChip>
                                    </MudText>
                                </MudListItem>
                            </MudList>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
                
                <MudDivider Class="my-4" />
                
                <!-- Orders in this Delivery -->
                <MudText Typo="Typo.h6" Class="mb-4">Orders in this Delivery</MudText>
                
                <MudTable Items="@orders" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Order #</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Store</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Weight</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Order #">@context.TxnId</MudTd>
                        <MudTd DataLabel="Type">@context.TxnType</MudTd>
                        <MudTd DataLabel="Store">@context.SiteIdtoNavigation?.SiteName</MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Size="Size.Small" Color="Color.Success">@context.TxnStatus</MudChip>
                        </MudTd>
                        <MudTd DataLabel="Weight">@CalculateOrderWeight(context).ToString("0.00") kg</MudTd>
                    </RowTemplate>
                </MudTable>
                
                <MudDivider Class="my-10" DividerType="DividerType.Middle"/>
                
                
                        <MudButton FullWidth="true" 
                                  Variant="Variant.Outlined" 
                                  Color="Color.Secondary"
                                  StartIcon="@Icons.Material.Filled.Edit"
                                  Href="@($"/acadia/edit-delivery/{DeliveryId}")">
                            Edit Delivery
                        </MudButton>

            }
        </MudCardContent>
        
        <MudCardActions>
            <MudButton Variant="Variant.Text" 
                      StartIcon="@Icons.Material.Filled.ArrowBack" 
                      OnClick="@(() => NavigationManager.NavigateTo("/acadia/deliveries"))">
                Back to Deliveries
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public int DeliveryId { get; set; }
    
    private bool isLoading = true;
    private Delivery delivery;
    private List<Txn> orders = new List<Txn>();
    private decimal totalWeight = 0;
    private List<string> storeNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDeliveryData();
    }
    
    private async Task LoadDeliveryData()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            // Load delivery
            delivery = await Context.Deliveries
                .FirstOrDefaultAsync(d => d.DeliveryId == DeliveryId);
                
            if (delivery != null)
            {
                // Load orders for this delivery
                orders = await Context.Txns
                    .Include(t => t.SiteIdtoNavigation)
                    .Include(t => t.SiteIdfromNavigation)
                    .Include(t => t.Txnitems)
                        .ThenInclude(ti => ti.Item)
                    .Where(t => t.DeliveryId == DeliveryId)
                    .ToListAsync();
                
                // Calculate total weight
                totalWeight = 0;
                foreach (var order in orders)
                {
                    totalWeight += CalculateOrderWeight(order);
                }
                
                storeNames = new List<string>();
                foreach (var order in orders)
                {
                    string storeName = order.SiteIdtoNavigation.SiteName;
                    if (!storeNames.Contains(storeName))
                    {
                        storeNames.Add(storeName);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading delivery: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private decimal CalculateOrderWeight(Txn order)
    {
        if (order == null)
            return 0;
            
        if (order.Txnitems == null || !order.Txnitems.Any())
        {
            // If Txnitems is not loaded, try to load from database
            try
            {
                var items = Context.Txnitems
                    .Include(i => i.Item)
                    .Where(i => i.TxnId == order.TxnId)
                    .ToList();
                    
                decimal totalWeight = 0;
                foreach (var item in items)
                {
                    if (item.Item != null)
                    {
                        totalWeight += item.Item.Weight * item.Quantity;
                    }
                }
                return totalWeight;
            }
            catch
            {
                return 0;
            }
        }
        
        decimal weight = 0;
        foreach (var item in order.Txnitems)
        {
            if (item.Item != null)
            {
                weight += item.Item.Weight * item.Quantity;
            }
        }
        return weight;
    }
}